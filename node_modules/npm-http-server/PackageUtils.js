'use strict';

exports.__esModule = true;
exports.getPackage = exports.createPackageURL = exports.parsePackageURL = undefined;

require('isomorphic-fetch');

var _url = require('url');

var _gunzipMaybe = require('gunzip-maybe');

var _gunzipMaybe2 = _interopRequireDefault(_gunzipMaybe);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _tarFs = require('tar-fs');

var _tarFs2 = _interopRequireDefault(_tarFs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var URLFormat = /^\/((?:@[^\/@]+\/)?[^\/@]+)(?:@([^\/]+))?(\/.*)?$/;

var decodeParam = function decodeParam(param) {
  return param && decodeURIComponent(param);
};

var ValidQueryKeys = {
  main: true,
  json: true
};

var queryIsValid = function queryIsValid(query) {
  return Object.keys(query).every(function (key) {
    return ValidQueryKeys[key];
  });
};

var parsePackageURL = exports.parsePackageURL = function parsePackageURL(url) {
  var _parseURL = (0, _url.parse)(url, true),
      pathname = _parseURL.pathname,
      search = _parseURL.search,
      query = _parseURL.query;

  if (!queryIsValid(query)) return null;

  var match = URLFormat.exec(pathname);

  if (match == null) return null;

  var packageName = match[1];
  var version = decodeParam(match[2]) || 'latest';
  var filename = decodeParam(match[3]);

  return { // If the URL is /@scope/name@version/path.js?main=browser:
    pathname: pathname, // /@scope/name@version/path.js
    search: search, // ?main=browser
    query: query, // { main: 'browser' }
    packageName: packageName, // @scope/name
    version: version, // version
    filename: filename // /path.js
  };
};

var createPackageURL = exports.createPackageURL = function createPackageURL(packageName, version, filename, search) {
  var pathname = '/' + packageName;

  if (version != null) pathname += '@' + version;

  if (filename != null) pathname += filename;

  if (search) pathname += search;

  return pathname;
};

var normalizeTarHeader = function normalizeTarHeader(header) {
  // Most packages have header names that look like "package/index.js"
  // so we shorten that to just "index.js" here. A few packages use a
  // prefix other than "package/". e.g. the firebase package uses the
  // "firebase_npm/" prefix. So we just strip the first dir name.
  header.name = header.name.replace(/^[^\/]+\//, '');
  return header;
};

var getPackage = exports.getPackage = function getPackage(tarballURL, outputDir, callback) {
  (0, _mkdirp2.default)(outputDir, function (error) {
    if (error) {
      callback(error);
    } else {
      (function () {
        var callbackWasCalled = false;

        fetch(tarballURL).then(function (response) {
          response.body.pipe((0, _gunzipMaybe2.default)()).pipe(_tarFs2.default.extract(outputDir, {
            dmode: 438, // All dirs should be writable
            fmode: 292, // All files should be readable
            map: normalizeTarHeader
          })).on('finish', callback).on('error', function (error) {
            if (callbackWasCalled) // LOL node streams
              return;

            callbackWasCalled = true;
            callback(error);
          });
        });
      })();
    }
  });
};