'use strict';

exports.__esModule = true;
exports.sendFile = exports.sendRedirect = exports.sendHTML = exports.sendServerError = exports.sendNotFoundError = exports.sendInvalidURLError = exports.sendJSON = exports.sendText = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _etag = require('etag');

var _etag2 = _interopRequireDefault(_etag);

var _FileUtils = require('./FileUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sendText = exports.sendText = function sendText(res, statusCode, text) {
  res.writeHead(statusCode, {
    'Content-Type': 'text/plain',
    'Content-Length': text.length
  });

  res.end(text);
};

var sendJSON = exports.sendJSON = function sendJSON(res, json) {
  var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var statusCode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 200;

  var text = JSON.stringify(json);

  res.writeHead(statusCode, {
    'Content-Type': 'application/json',
    'Content-Length': text.length,
    'Cache-Control': 'public, max-age=' + maxAge
  });

  res.end(text);
};

var sendInvalidURLError = exports.sendInvalidURLError = function sendInvalidURLError(res, url) {
  return sendText(res, 403, 'Invalid URL: ' + url);
};

var sendNotFoundError = exports.sendNotFoundError = function sendNotFoundError(res, what) {
  return sendText(res, 404, 'Not found: ' + what);
};

var sendServerError = exports.sendServerError = function sendServerError(res, error) {
  return sendText(res, 500, 'Server error: ' + (error.message || error));
};

var sendHTML = exports.sendHTML = function sendHTML(res, html) {
  var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var statusCode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 200;

  res.writeHead(statusCode, {
    'Content-Type': 'text/html',
    'Content-Length': html.length,
    'Cache-Control': 'public, max-age=' + maxAge
  });

  res.end(html);
};

var sendRedirect = exports.sendRedirect = function sendRedirect(res, relativeLocation) {
  var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var statusCode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 302;

  var location = res.req && res.req.baseUrl ? res.req.baseUrl + relativeLocation : relativeLocation;

  var html = '<p>You are being redirected to <a href="' + location + '">' + location + '</a>';

  res.writeHead(statusCode, {
    'Content-Type': 'text/html',
    'Content-Length': html.length,
    'Cache-Control': 'public, max-age=' + maxAge,
    'Location': location
  });

  res.end(html);
};

var sendFile = exports.sendFile = function sendFile(res, file, stats) {
  var maxAge = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  return Promise.resolve(stats || (0, _FileUtils.getStats)(file)).then(function (stats) {
    var contentType = (0, _FileUtils.getContentType)(file);

    if (contentType === 'text/html') contentType = 'text/plain'; // We can't serve HTML because bad people :(

    res.writeHead(200, {
      'Content-Type': contentType,
      'Content-Length': stats.size,
      'Cache-Control': 'public, max-age=' + maxAge,
      'ETag': (0, _etag2.default)(stats)
    });

    var stream = _fs2.default.createReadStream(file);

    stream.on('error', function (error) {
      sendServerError(res, error);
    });

    stream.pipe(res);
  }).catch(function (error) {
    sendServerError(res, error);
  });
};