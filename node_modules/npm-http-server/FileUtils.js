'use strict';

exports.__esModule = true;
exports.getFileType = exports.getStats = exports.getContentType = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextFiles = /\/?(LICENSE|README|CHANGES|AUTHORS|Makefile|\.[a-z]*rc|\.git[a-z]*|\.[a-z]*ignore)$/i;

var getContentType = exports.getContentType = function getContentType(file) {
  return TextFiles.test(file) ? 'text/plain' : _mime2.default.lookup(file);
};

var getStats = exports.getStats = function getStats(file) {
  return new Promise(function (resolve, reject) {
    _fs2.default.lstat(file, function (error, stats) {
      if (error) {
        reject(error);
      } else {
        resolve(stats);
      }
    });
  });
};

var getFileType = exports.getFileType = function getFileType(stats) {
  if (stats.isFile()) return 'file';
  if (stats.isDirectory()) return 'directory';
  if (stats.isBlockDevice()) return 'blockDevice';
  if (stats.isCharacterDevice()) return 'characterDevice';
  if (stats.isSymbolicLink()) return 'symlink';
  if (stats.isSocket()) return 'socket';
  if (stats.isFIFO()) return 'fifo';
  return 'unknown';
};