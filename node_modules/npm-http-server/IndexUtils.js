'use strict';

exports.__esModule = true;
exports.generateDirectoryIndexHTML = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _path = require('path');

var _server = require('react-dom/server');

var _IndexPage = require('./components/IndexPage');

var _IndexPage2 = _interopRequireDefault(_IndexPage);

var _FileUtils = require('./FileUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getEntries = function getEntries(dir) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readdir(dir, function (error, files) {
      if (error) {
        reject(error);
      } else {
        resolve(Promise.all(files.map(function (file) {
          return (0, _FileUtils.getStats)((0, _path.join)(dir, file));
        })).then(function (statsArray) {
          return statsArray.map(function (stats, index) {
            return { file: files[index], stats: stats };
          });
        }));
      }
    });
  });
};

var DOCTYPE = '<!DOCTYPE html>';

var generateIndexPage = function generateIndexPage(props) {
  return DOCTYPE + (0, _server.renderToStaticMarkup)(_react2.default.createElement(_IndexPage2.default, props));
};

var generateDirectoryIndexHTML = exports.generateDirectoryIndexHTML = function generateDirectoryIndexHTML(packageInfo, version, baseDir, dir, callback) {
  return getEntries((0, _path.join)(baseDir, dir)).then(function (entries) {
    return generateIndexPage({ packageInfo: packageInfo, version: version, dir: dir, entries: entries });
  }).then(function (html) {
    return callback(null, html);
  }, callback);
};