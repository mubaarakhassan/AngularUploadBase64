'use strict';

exports.__esModule = true;
exports.getPackageInfo = undefined;

require('isomorphic-fetch');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _RegistryCache = require('./RegistryCache');

var _RegistryCache2 = _interopRequireDefault(_RegistryCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('npm-http-server');

var getPackageInfoFromRegistry = function getPackageInfoFromRegistry(registryURL, packageName) {
  var encodedPackageName = void 0;
  if (packageName.charAt(0) === '@') {
    encodedPackageName = '@' + encodeURIComponent(packageName.substring(1));
  } else {
    encodedPackageName = encodeURIComponent(packageName);
  }

  var url = registryURL + '/' + encodedPackageName;

  return fetch(url, {
    headers: {
      'Accept': 'application/json'
    }
  }).then(function (response) {
    if (response.status === 404) return null;

    return response.json();
  });
};

var OneMinute = 60 * 1000;
var PackageNotFound = 'PackageNotFound';

var getPackageInfo = exports.getPackageInfo = function getPackageInfo(registryURL, packageName, callback) {
  var cacheKey = registryURL + packageName;

  _RegistryCache2.default.get(cacheKey, function (error, value) {
    if (error) {
      callback(error);
    } else if (value) {
      callback(null, value === PackageNotFound ? null : value);
    } else {
      log('Registry cache miss for package %s', packageName);

      getPackageInfoFromRegistry(registryURL, packageName).then(function (value) {
        if (value == null) {
          // Keep 404s in the cache for 5 minutes. This prevents us
          // from making unnecessary requests to the registry for
          // bad package names. In the worst case, a brand new
          // package's info will be available within 5 minutes.
          _RegistryCache2.default.set(cacheKey, PackageNotFound, OneMinute * 5);
        } else {
          _RegistryCache2.default.set(cacheKey, value, OneMinute);
        }

        callback(null, value);
      }, function (error) {
        // Do not cache errors.
        _RegistryCache2.default.del(cacheKey);
        callback(error);
      });
    }
  });
};