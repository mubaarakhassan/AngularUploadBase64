'use strict';

exports.__esModule = true;
exports.generateMetadata = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _FileUtils = require('./FileUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getEntries = function getEntries(baseDir, path, maximumDepth) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readdir((0, _path.join)(baseDir, path), function (error, files) {
      if (error) {
        reject(error);
      } else {
        resolve(Promise.all(files.map(function (f) {
          return (0, _FileUtils.getStats)((0, _path.join)(baseDir, path, f));
        })).then(function (statsArray) {
          return Promise.all(statsArray.map(function (stats, index) {
            return getMetadata(baseDir, (0, _path.join)(path, files[index]), stats, maximumDepth - 1);
          }));
        }));
      }
    });
  });
};

var formatTime = function formatTime(time) {
  return new Date(time).toISOString();
};

var getMetadata = function getMetadata(baseDir, path, stats, maximumDepth) {
  var metadata = {
    path: path,
    lastModified: formatTime(stats.mtime),
    contentType: (0, _FileUtils.getContentType)(path),
    size: stats.size,
    type: (0, _FileUtils.getFileType)(stats)
  };

  if (!stats.isDirectory() || maximumDepth === 0) return Promise.resolve(metadata);

  return getEntries(baseDir, path, maximumDepth).then(function (files) {
    metadata.files = files;
    return metadata;
  });
};

var generateMetadata = exports.generateMetadata = function generateMetadata(baseDir, path, stats, maximumDepth, callback) {
  return getMetadata(baseDir, path, stats, maximumDepth).then(function (metadata) {
    return callback(null, metadata);
  }, callback);
};